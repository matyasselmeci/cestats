#!/usr/bin/env python3
"""Gets a list of CEs w/ FQDN hosted-ce*"""

import os
import sqlite3
import sys
import xml.etree.ElementTree as ET
from distutils.util import strtobool

US_TLDS = {"net", "gov", "edu", "org", "com"}


def is_us_fqdn(fqdn):
    # special cases
    if fqdn.endswith(".cancercomputer.com"):
        return False
    if fqdn.endswith(".slateci.io"):
        return True

    tld = fqdn.split(".")[-1]
    return tld in US_TLDS


def is_hosted_fqdn(fqdn):
    return (
        fqdn.startswith("hosted-ce") or fqdn.startswith("pearc-ce")
    ) and fqdn.endswith(".grid.uchicago.edu")


def get_tree(params):
    return ET.fromstring(
        os.popen(
            "curl -Ls 'https://topology.opensciencegrid.org/rgsummary/xml?%s'" % params
        ).read()
    )


def get_resources_with_fqdns_and_services(resourcegroup):
    resources = resourcegroup.findall("./Resources/Resource")
    return [
        (res, res.find("./FQDN").text.strip(), res.findall("./Services/Service"))
        for res in resources
        if res.find("./FQDN") is not None and res.find("./Services/Service") is not None
    ]


def main(argv):
    try:
        dbname = argv[1]
    except IndexError:
        dbname = "resources.sqlite"

    db = sqlite3.connect(dbname)

    db.executescript(
        """
        DROP TABLE IF EXISTS resourcegroup;

        CREATE TABLE resourcegroup(
            name TEXT PRIMARY KEY,
            facility TEXT
        );

        DROP TABLE IF EXISTS resource;

        CREATE TABLE resource(
            name TEXT PRIMARY KEY,
            active INTEGER,
            fqdn TEXT,
            hosted INTEGER,
            prod INTEGER,
            us INTEGER,
            resourcegroup TEXT,
            description TEXT,
            wlcg_accounting_name TEXT,
            FOREIGN KEY (resourcegroup)
              REFERENCES resourcegroup (name)
        );

        DROP TABLE IF EXISTS service;

        CREATE TABLE service(
            name TEXT,
            resource_name TEXT,
            description TEXT,
            UNIQUE (name, resource_name),
            FOREIGN KEY (resource_name)
              REFERENCES resource (name)
        );

        DROP VIEW IF EXISTS ce;

        CREATE VIEW ce
        AS
        SELECT
            resource.name,
            active,
            fqdn,
            hosted,
            prod,
            us,
            resourcegroup
        FROM resource
        INNER JOIN service ON resource.name = service.resource_name
        WHERE service.name = "CE"
        ;

        DROP VIEW IF EXISTS submit_node;

        CREATE VIEW submit_node
        AS
        SELECT
            resource.name,
            active,
            fqdn,
            prod,
            us,
            resourcegroup
        FROM resource
        INNER JOIN service ON resource.name = service.resource_name
        WHERE service.name = "Submit Node"
        ;

        DROP VIEW IF EXISTS gridftp;

        CREATE VIEW gridftp
        AS
        SELECT
            resource.name,
            active,
            fqdn,
            resourcegroup,
            resource.description
        FROM resource
        INNER JOIN service ON resource.name = service.resource_name
        WHERE service.name = "GridFtp"
        ;
"""
    )

    # Inefficient but the gridtype is a characteristic of the RG, not the
    # resource, so the XML queries would have been more annoying
    prod_tree = get_tree("gridtype=on&gridtype_1=on")
    itb_tree = get_tree("gridtype=on&gridtype_2=on")

    cur = db.cursor()
    for tree, prod in [(prod_tree, True), (itb_tree, False)]:
        for resourcegroup in tree.findall("./ResourceGroup"):
            resourcegroup_name = resourcegroup.find("./GroupName").text.strip()
            facility = resourcegroup.find("./Facility/Name").text.strip()

            resources = get_resources_with_fqdns_and_services(resourcegroup)
            if not resources:
                continue
            cur.execute(
                "INSERT INTO resourcegroup (name, facility) " "VALUES (?, ?)",
                (resourcegroup_name, facility),
            )

            for res, fqdn, services in resources:
                name = res.find("./Name").text.strip()
                active = strtobool(res.find("./Active").text.strip())
                fqdn = fqdn.lower()
                hosted = is_hosted_fqdn(fqdn)
                us = is_us_fqdn(fqdn)
                description = res.find("./Description").text.strip()
                wlcg_accounting_name = None
                wlcg_accounting_name_elem = res.find("./WLCGInformation/AccountingName")
                if wlcg_accounting_name_elem is not None and wlcg_accounting_name_elem.text is not None:
                    wlcg_accounting_name = wlcg_accounting_name_elem.text.strip()
                cur.execute(
                    "INSERT INTO resource (name, active, fqdn, hosted, prod, us, wlcg_accounting_name, resourcegroup, description) "
                    "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                    (name, active, fqdn, hosted, prod, us, wlcg_accounting_name, resourcegroup_name, description),
                )
                for svc in services:
                    svc_name = svc.find("./Name").text.strip()
                    svc_description = svc.find("./Description").text.strip()
                    cur.execute(
                        "INSERT INTO service (name, resource_name, description) " "VALUES (?, ?, ?)",
                        (svc_name, name, svc_description),
                    )

    db.commit()


main(sys.argv)
